{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoMultiAccounts = void 0;\n\nconst RegistryType_1 = require(\"../RegistryType\");\n\nconst CryptoHDKey_1 = require(\"../CryptoHDKey\");\n\nconst RegistryItem_1 = require(\"../RegistryItem\");\n\nconst lib_1 = require(\"../lib\");\n\nvar Keys;\n\n(function (Keys) {\n  Keys[Keys[\"masterFingerprint\"] = 1] = \"masterFingerprint\";\n  Keys[Keys[\"keys\"] = 2] = \"keys\";\n  Keys[Keys[\"device\"] = 3] = \"device\";\n})(Keys || (Keys = {}));\n\nclass CryptoMultiAccounts extends RegistryItem_1.RegistryItem {\n  constructor(masterFingerprint, keys, device) {\n    super();\n    this.masterFingerprint = masterFingerprint;\n    this.keys = keys;\n    this.device = device;\n\n    this.getRegistryType = () => RegistryType_1.RegistryTypes.CRYPTO_MULTI_ACCOUNTS;\n\n    this.getMasterFingerprint = () => this.masterFingerprint;\n\n    this.getKeys = () => this.keys;\n\n    this.getDevice = () => this.device;\n\n    this.toDataItem = () => {\n      const map = {};\n\n      if (this.masterFingerprint) {\n        map[Keys.masterFingerprint] = this.masterFingerprint.readUInt32BE(0);\n      }\n\n      if (this.keys) {\n        map[Keys.keys] = this.keys.map(item => {\n          const dataItem = item.toDataItem();\n          dataItem.setTag(item.getRegistryType().getTag());\n          return dataItem;\n        });\n      }\n\n      if (this.device) {\n        map[Keys.device] = this.device;\n      }\n\n      return new lib_1.DataItem(map);\n    };\n  }\n\n}\n\nexports.CryptoMultiAccounts = CryptoMultiAccounts;\n\nCryptoMultiAccounts.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const masterFingerprint = Buffer.alloc(4);\n  const _masterFingerprint = map[Keys.masterFingerprint];\n\n  if (_masterFingerprint) {\n    masterFingerprint.writeUInt32BE(_masterFingerprint, 0);\n  }\n\n  const keys = map[Keys.keys];\n  const cryptoHDKeys = keys.map(item => CryptoHDKey_1.CryptoHDKey.fromDataItem(item));\n  const device = map[Keys.device];\n  return new CryptoMultiAccounts(masterFingerprint, cryptoHDKeys, device);\n};\n\nCryptoMultiAccounts.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoMultiAccounts.fromDataItem(dataItem);\n}; //# sourceMappingURL=CryptoMultiAccounts.js.map","map":null,"metadata":{},"sourceType":"script"}