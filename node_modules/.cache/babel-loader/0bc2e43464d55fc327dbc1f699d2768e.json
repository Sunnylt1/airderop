{"ast":null,"code":"import { useWallet } from '@solana/wallet-adapter-react';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Button } from './Button.js';\nimport { useWalletModal } from './useWalletModal.js';\nimport { WalletConnectButton } from './WalletConnectButton.js';\nimport { WalletIcon } from './WalletIcon.js';\nimport { WalletModalButton } from './WalletModalButton.js';\nexport const WalletMultiButton = _ref => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  const {\n    publicKey,\n    wallet,\n    disconnect\n  } = useWallet();\n  const {\n    setVisible\n  } = useWalletModal();\n  const [copied, setCopied] = useState(false);\n  const [active, setActive] = useState(false);\n  const ref = useRef(null);\n  const base58 = useMemo(() => publicKey?.toBase58(), [publicKey]);\n  const content = useMemo(() => {\n    if (children) return children;\n    if (!wallet || !base58) return null;\n    return base58.slice(0, 4) + '..' + base58.slice(-4);\n  }, [children, wallet, base58]);\n  const copyAddress = useCallback(async () => {\n    if (base58) {\n      await navigator.clipboard.writeText(base58);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 400);\n    }\n  }, [base58]);\n  const openDropdown = useCallback(() => {\n    setActive(true);\n  }, []);\n  const closeDropdown = useCallback(() => {\n    setActive(false);\n  }, []);\n  const openModal = useCallback(() => {\n    setVisible(true);\n    closeDropdown();\n  }, [setVisible, closeDropdown]);\n  useEffect(() => {\n    const listener = event => {\n      const node = ref.current; // Do nothing if clicking dropdown or its descendants\n\n      if (!node || node.contains(event.target)) return;\n      closeDropdown();\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, closeDropdown]);\n  if (!wallet) return React.createElement(WalletModalButton, { ...props\n  }, children);\n  if (!base58) return React.createElement(WalletConnectButton, { ...props\n  }, children);\n  return React.createElement(\"div\", {\n    className: \"wallet-adapter-dropdown\"\n  }, React.createElement(Button, {\n    \"aria-expanded\": active,\n    className: \"wallet-adapter-button-trigger\",\n    style: {\n      pointerEvents: active ? 'none' : 'auto',\n      ...props.style\n    },\n    onClick: openDropdown,\n    startIcon: React.createElement(WalletIcon, {\n      wallet: wallet\n    }),\n    ...props\n  }, content), React.createElement(\"ul\", {\n    \"aria-label\": \"dropdown-list\",\n    className: `wallet-adapter-dropdown-list ${active && 'wallet-adapter-dropdown-list-active'}`,\n    ref: ref,\n    role: \"menu\"\n  }, React.createElement(\"li\", {\n    onClick: copyAddress,\n    className: \"wallet-adapter-dropdown-list-item\",\n    role: \"menuitem\"\n  }, copied ? 'Copied' : 'Copy address'), React.createElement(\"li\", {\n    onClick: openModal,\n    className: \"wallet-adapter-dropdown-list-item\",\n    role: \"menuitem\"\n  }, \"Change wallet\"), React.createElement(\"li\", {\n    onClick: disconnect,\n    className: \"wallet-adapter-dropdown-list-item\",\n    role: \"menuitem\"\n  }, \"Disconnect\")));\n}; //# sourceMappingURL=WalletMultiButton.js.map","map":null,"metadata":{},"sourceType":"module"}