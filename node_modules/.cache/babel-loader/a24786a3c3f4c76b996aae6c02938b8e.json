{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HeartBeat = void 0;\n\nconst events_1 = require(\"events\");\n\nconst time_1 = require(\"@walletconnect/time\");\n\nconst types_1 = require(\"./types\");\n\nconst constants_1 = require(\"./constants\");\n\nclass HeartBeat extends types_1.IHeartBeat {\n  constructor(opts) {\n    super(opts);\n    this.events = new events_1.EventEmitter();\n    this.interval = constants_1.HEARTBEAT_INTERVAL;\n    this.interval = (opts === null || opts === void 0 ? void 0 : opts.interval) || constants_1.HEARTBEAT_INTERVAL;\n  }\n\n  static init(opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const heartbeat = new HeartBeat(opts);\n      yield heartbeat.init();\n      return heartbeat;\n    });\n  }\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.initialize();\n    });\n  }\n\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n\n  initialize() {\n    return __awaiter(this, void 0, void 0, function* () {\n      setInterval(() => this.pulse(), time_1.toMiliseconds(this.interval));\n    });\n  }\n\n  pulse() {\n    this.events.emit(constants_1.HEARTBEAT_EVENTS.pulse);\n  }\n\n}\n\nexports.HeartBeat = HeartBeat; //# sourceMappingURL=heartbeat.js.map","map":null,"metadata":{},"sourceType":"script"}