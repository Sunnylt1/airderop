{"ast":null,"code":"// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = require('../functions/satisfies.js');\n\nconst compare = require('../functions/compare.js');\n\nmodule.exports = (versions, range, options) => {\n  const set = [];\n  let first = null;\n  let prev = null;\n  const v = versions.sort((a, b) => compare(a, b, options));\n\n  for (const version of v) {\n    const included = satisfies(version, range, options);\n\n    if (included) {\n      prev = version;\n\n      if (!first) {\n        first = version;\n      }\n    } else {\n      if (prev) {\n        set.push([first, prev]);\n      }\n\n      prev = null;\n      first = null;\n    }\n  }\n\n  if (first) {\n    set.push([first, null]);\n  }\n\n  const ranges = [];\n\n  for (const [min, max] of set) {\n    if (min === max) {\n      ranges.push(min);\n    } else if (!max && min === v[0]) {\n      ranges.push('*');\n    } else if (!max) {\n      ranges.push(`>=${min}`);\n    } else if (min === v[0]) {\n      ranges.push(`<=${max}`);\n    } else {\n      ranges.push(`${min} - ${max}`);\n    }\n  }\n\n  const simplified = ranges.join(' || ');\n  const original = typeof range.raw === 'string' ? range.raw : String(range);\n  return simplified.length < original.length ? simplified : range;\n};","map":null,"metadata":{},"sourceType":"script"}