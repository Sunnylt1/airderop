{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { WalletNotConnectedError } from './errors.js';\nexport { EventEmitter };\n/**\n * A wallet's readiness describes a series of states that the wallet can be in,\n * depending on what kind of wallet it is. An installable wallet (eg. a browser\n * extension like Phantom) might be `Installed` if we've found the Phantom API\n * in the global scope, or `NotDetected` otherwise. A loadable, zero-install\n * runtime (eg. Torus Wallet) might simply signal that it's `Loadable`. Use this\n * metadata to personalize the wallet list for each user (eg. to show their\n * installed wallets first).\n */\n\nexport var WalletReadyState;\n\n(function (WalletReadyState) {\n  /**\n   * User-installable wallets can typically be detected by scanning for an API\n   * that they've injected into the global context. If such an API is present,\n   * we consider the wallet to have been installed.\n   */\n  WalletReadyState[\"Installed\"] = \"Installed\";\n  WalletReadyState[\"NotDetected\"] = \"NotDetected\";\n  /**\n   * Loadable wallets are always available to you. Since you can load them at\n   * any time, it's meaningless to say that they have been detected.\n   */\n\n  WalletReadyState[\"Loadable\"] = \"Loadable\";\n  /**\n   * If a wallet is not supported on a given platform (eg. server-rendering, or\n   * mobile) then it will stay in the `Unsupported` state.\n   */\n\n  WalletReadyState[\"Unsupported\"] = \"Unsupported\";\n})(WalletReadyState || (WalletReadyState = {}));\n\nexport class BaseWalletAdapter extends EventEmitter {\n  get connected() {\n    return !!this.publicKey;\n  }\n\n  async prepareTransaction(transaction, connection) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const publicKey = this.publicKey;\n    if (!publicKey) throw new WalletNotConnectedError();\n    transaction.feePayer = transaction.feePayer || publicKey;\n    transaction.recentBlockhash = transaction.recentBlockhash || (await connection.getLatestBlockhash({\n      commitment: options.preflightCommitment,\n      minContextSlot: options.minContextSlot\n    })).blockhash;\n    return transaction;\n  }\n\n}\nexport function scopePollingDetectionStrategy(detect) {\n  // Early return when server-side rendering\n  if (typeof window === 'undefined' || typeof document === 'undefined') return;\n  const disposers = [];\n\n  function detectAndDispose() {\n    const detected = detect();\n\n    if (detected) {\n      for (const dispose of disposers) {\n        dispose();\n      }\n    }\n  } // Strategy #1: Try detecting every second.\n\n\n  const interval = // TODO: #334 Replace with idle callback strategy.\n  setInterval(detectAndDispose, 1000);\n  disposers.push(() => clearInterval(interval)); // Strategy #2: Detect as soon as the DOM becomes 'ready'/'interactive'.\n\n  if ( // Implies that `DOMContentLoaded` has not yet fired.\n  document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', detectAndDispose, {\n      once: true\n    });\n    disposers.push(() => document.removeEventListener('DOMContentLoaded', detectAndDispose));\n  } // Strategy #3: Detect after the `window` has fully loaded.\n\n\n  if ( // If the `complete` state has been reached, we're too late.\n  document.readyState !== 'complete') {\n    window.addEventListener('load', detectAndDispose, {\n      once: true\n    });\n    disposers.push(() => window.removeEventListener('load', detectAndDispose));\n  } // Strategy #4: Detect synchronously, now.\n\n\n  detectAndDispose();\n} //# sourceMappingURL=adapter.js.map","map":null,"metadata":{},"sourceType":"module"}