{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiKey = void 0;\n\nconst CryptoECKey_1 = require(\"./CryptoECKey\");\n\nconst CryptoHDKey_1 = require(\"./CryptoHDKey\");\n\nconst DataItem_1 = require(\"./lib/DataItem\");\n\nconst RegistryItem_1 = require(\"./RegistryItem\");\n\nconst RegistryType_1 = require(\"./RegistryType\");\n\nvar Keys;\n\n(function (Keys) {\n  Keys[Keys[\"threshold\"] = 1] = \"threshold\";\n  Keys[Keys[\"keys\"] = 2] = \"keys\";\n})(Keys || (Keys = {}));\n\nclass MultiKey extends RegistryItem_1.RegistryItem {\n  constructor(threshold, keys) {\n    super();\n    this.threshold = threshold;\n    this.keys = keys;\n\n    this.getThreshold = () => this.threshold;\n\n    this.getKeys = () => this.keys;\n\n    this.toDataItem = () => {\n      const map = {};\n      map[Keys.threshold] = this.threshold;\n      const keys = this.keys.map(k => {\n        const dataItem = k.toDataItem();\n        dataItem.setTag(k.getRegistryType().getTag());\n        return dataItem;\n      });\n      map[Keys.keys] = keys;\n      return new DataItem_1.DataItem(map);\n    };\n\n    this.getOutputDescriptorContent = () => {\n      return [this.getThreshold(), this.keys.map(k => k.getOutputDescriptorContent()).join(',')].join(',');\n    };\n  }\n\n}\n\nexports.MultiKey = MultiKey;\n\nMultiKey.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const threshold = map[Keys.threshold];\n  const _keys = map[Keys.keys];\n  const keys = [];\n\n  _keys.forEach(k => {\n    if (k.getTag() === RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getTag()) {\n      keys.push(CryptoHDKey_1.CryptoHDKey.fromDataItem(k));\n    } else if (k.getTag() === RegistryType_1.RegistryTypes.CRYPTO_ECKEY.getTag()) {\n      keys.push(CryptoECKey_1.CryptoECKey.fromDataItem(k));\n    }\n  });\n\n  return new MultiKey(threshold, keys);\n}; //# sourceMappingURL=MultiKey.js.map","map":null,"metadata":{},"sourceType":"script"}