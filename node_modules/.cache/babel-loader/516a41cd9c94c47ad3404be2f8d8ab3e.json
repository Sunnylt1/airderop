{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\nclass Wallet extends EventEmitter {\n  constructor(provider, network) {\n    var _this;\n\n    super();\n    _this = this;\n\n    this._handleMessage = e => {\n      if (this._injectedProvider && e.source === window || e.origin === this._providerUrl.origin && e.source === this._popup) {\n        if (e.data.method === 'connected') {\n          const newPublicKey = new PublicKey(e.data.params.publicKey);\n\n          if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n            if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n              this._handleDisconnect();\n            }\n\n            this._publicKey = newPublicKey;\n            this._autoApprove = !!e.data.params.autoApprove;\n            this.emit('connect', this._publicKey);\n          }\n        } else if (e.data.method === 'disconnected') {\n          this._handleDisconnect();\n        } else if (e.data.result || e.data.error) {\n          if (this._responsePromises.has(e.data.id)) {\n            const [resolve, reject] = this._responsePromises.get(e.data.id);\n\n            if (e.data.result) {\n              resolve(e.data.result);\n            } else {\n              reject(new Error(e.data.error));\n            }\n          }\n        }\n      }\n    };\n\n    this._handleConnect = () => {\n      if (!this._handlerAdded) {\n        this._handlerAdded = true;\n        window.addEventListener('message', this._handleMessage);\n        window.addEventListener('beforeunload', this.disconnect);\n      }\n\n      if (this._injectedProvider) {\n        return new Promise(resolve => {\n          this._sendRequest('connect', {});\n\n          resolve();\n        });\n      } else {\n        window.name = 'parent';\n        this._popup = window.open(this._providerUrl.toString(), '_blank', 'location,resizable,width=460,height=675');\n        return new Promise(resolve => {\n          this.once('connect', resolve);\n        });\n      }\n    };\n\n    this._handleDisconnect = () => {\n      if (this._handlerAdded) {\n        this._handlerAdded = false;\n        window.removeEventListener('message', this._handleMessage);\n        window.removeEventListener('beforeunload', this.disconnect);\n      }\n\n      if (this._publicKey) {\n        this._publicKey = null;\n        this.emit('disconnect');\n      }\n\n      this._responsePromises.forEach((_ref, id) => {\n        let [resolve, reject] = _ref;\n\n        this._responsePromises.delete(id);\n\n        reject('Wallet disconnected');\n      });\n    };\n\n    this._sendRequest = async function (method, params) {\n      if (method !== 'connect' && !_this.connected) {\n        throw new Error('Wallet not connected');\n      }\n\n      const requestId = _this._nextRequestId;\n      ++_this._nextRequestId;\n      return new Promise((resolve, reject) => {\n        _this._responsePromises.set(requestId, [resolve, reject]);\n\n        if (_this._injectedProvider) {\n          _this._injectedProvider.postMessage({\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params: {\n              network: _this._network,\n              ...params\n            }\n          });\n        } else {\n          _this._popup.postMessage({\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params\n          }, _this._providerUrl.origin);\n\n          if (!_this.autoApprove) {\n            _this._popup.focus();\n          }\n        }\n      });\n    };\n\n    this.connect = () => {\n      if (this._popup) {\n        this._popup.close();\n      }\n\n      return this._handleConnect();\n    };\n\n    this.disconnect = async function () {\n      if (_this._injectedProvider) {\n        await _this._sendRequest('disconnect', {});\n      }\n\n      if (_this._popup) {\n        _this._popup.close();\n      }\n\n      _this._handleDisconnect();\n    };\n\n    this.sign = async function (data, display) {\n      if (!(data instanceof Uint8Array)) {\n        throw new Error('Data must be an instance of Uint8Array');\n      }\n\n      const response = await _this._sendRequest('sign', {\n        data,\n        display\n      });\n      const signature = bs58.decode(response.signature);\n      const publicKey = new PublicKey(response.publicKey);\n      return {\n        signature,\n        publicKey\n      };\n    };\n\n    this.signTransaction = async function (transaction) {\n      const response = await _this._sendRequest('signTransaction', {\n        message: bs58.encode(transaction.serializeMessage())\n      });\n      const signature = bs58.decode(response.signature);\n      const publicKey = new PublicKey(response.publicKey);\n      transaction.addSignature(publicKey, signature);\n      return transaction;\n    };\n\n    this.signAllTransactions = async function (transactions) {\n      const response = await _this._sendRequest('signAllTransactions', {\n        messages: transactions.map(tx => bs58.encode(tx.serializeMessage()))\n      });\n      const signatures = response.signatures.map(s => bs58.decode(s));\n      const publicKey = new PublicKey(response.publicKey);\n      transactions = transactions.map((tx, idx) => {\n        tx.addSignature(publicKey, signatures[idx]);\n        return tx;\n      });\n      return transactions;\n    };\n\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network\n      }).toString();\n    } else {\n      throw new Error('provider parameter must be an injected provider or a URL string.');\n    }\n\n    this._network = network;\n    this._publicKey = null;\n    this._autoApprove = false;\n    this._popup = null;\n    this._handlerAdded = false;\n    this._nextRequestId = 1;\n    this._responsePromises = new Map();\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get connected() {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove() {\n    return this._autoApprove;\n  }\n\n}\n\nfunction isString(a) {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a) {\n  return isObject(a) && isFunction(a.postMessage);\n}\n\nfunction isObject(a) {\n  return typeof a === 'object' && a !== null;\n}\n\nfunction isFunction(a) {\n  return typeof a === 'function';\n}\n\nexport default Wallet; //# sourceMappingURL=index.modern.js.map","map":null,"metadata":{},"sourceType":"module"}