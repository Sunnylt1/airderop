{"ast":null,"code":"/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\n\nconst _0n = BigInt(0);\n\nconst _1n = BigInt(1);\n\nconst _2n = BigInt(2);\n\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n  a: BigInt(-1),\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n  l: CU_O,\n  n: CU_O,\n  h: BigInt(8),\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960')\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n\nclass ExtendedPoint {\n  constructor(x, y, z, t) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.t = t;\n  }\n\n  static fromAffine(p) {\n    if (!(p instanceof Point)) {\n      throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n    }\n\n    if (p.equals(Point.ZERO)) return ExtendedPoint.ZERO;\n    return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n  }\n\n  static toAffineBatch(points) {\n    const toInv = invertBatch(points.map(p => p.z));\n    return points.map((p, i) => p.toAffine(toInv[i]));\n  }\n\n  static normalizeZ(points) {\n    return this.toAffineBatch(points).map(this.fromAffine);\n  }\n\n  equals(other) {\n    assertExtPoint(other);\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2\n    } = other;\n    const X1Z2 = mod(X1 * Z2);\n    const X2Z1 = mod(X2 * Z1);\n    const Y1Z2 = mod(Y1 * Z2);\n    const Y2Z1 = mod(Y2 * Z1);\n    return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n  }\n\n  negate() {\n    return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n  }\n\n  double() {\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      a\n    } = CURVE;\n    const A = mod(X1 * X1);\n    const B = mod(Y1 * Y1);\n    const C = mod(_2n * mod(Z1 * Z1));\n    const D = mod(a * A);\n    const x1y1 = X1 + Y1;\n    const E = mod(mod(x1y1 * x1y1) - A - B);\n    const G = D + B;\n    const F = G - C;\n    const H = D - B;\n    const X3 = mod(E * F);\n    const Y3 = mod(G * H);\n    const T3 = mod(E * H);\n    const Z3 = mod(F * G);\n    return new ExtendedPoint(X3, Y3, Z3, T3);\n  }\n\n  add(other) {\n    assertExtPoint(other);\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1,\n      t: T1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2,\n      t: T2\n    } = other;\n    const A = mod((Y1 - X1) * (Y2 + X2));\n    const B = mod((Y1 + X1) * (Y2 - X2));\n    const F = mod(B - A);\n    if (F === _0n) return this.double();\n    const C = mod(Z1 * _2n * T2);\n    const D = mod(T1 * _2n * Z2);\n    const E = D + C;\n    const G = B + A;\n    const H = D - C;\n    const X3 = mod(E * F);\n    const Y3 = mod(G * H);\n    const T3 = mod(E * H);\n    const Z3 = mod(F * G);\n    return new ExtendedPoint(X3, Y3, Z3, T3);\n  }\n\n  subtract(other) {\n    return this.add(other.negate());\n  }\n\n  precomputeWindow(W) {\n    const windows = 1 + 256 / W;\n    const points = [];\n    let p = this;\n    let base = p;\n\n    for (let window = 0; window < windows; window++) {\n      base = p;\n      points.push(base);\n\n      for (let i = 1; i < 2 ** (W - 1); i++) {\n        base = base.add(p);\n        points.push(base);\n      }\n\n      p = base.double();\n    }\n\n    return points;\n  }\n\n  wNAF(n, affinePoint) {\n    if (!affinePoint && this.equals(ExtendedPoint.BASE)) affinePoint = Point.BASE;\n    const W = affinePoint && affinePoint._WINDOW_SIZE || 1;\n\n    if (256 % W) {\n      throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n    }\n\n    let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n\n    if (!precomputes) {\n      precomputes = this.precomputeWindow(W);\n\n      if (affinePoint && W !== 1) {\n        precomputes = ExtendedPoint.normalizeZ(precomputes);\n        pointPrecomputes.set(affinePoint, precomputes);\n      }\n    }\n\n    let p = ExtendedPoint.ZERO;\n    let f = ExtendedPoint.ZERO;\n    const windows = 1 + 256 / W;\n    const windowSize = 2 ** (W - 1);\n    const mask = BigInt(2 ** W - 1);\n    const maxNumber = 2 ** W;\n    const shiftBy = BigInt(W);\n\n    for (let window = 0; window < windows; window++) {\n      const offset = window * windowSize;\n      let wbits = Number(n & mask);\n      n >>= shiftBy;\n\n      if (wbits > windowSize) {\n        wbits -= maxNumber;\n        n += _1n;\n      }\n\n      if (wbits === 0) {\n        let pr = precomputes[offset];\n        if (window % 2) pr = pr.negate();\n        f = f.add(pr);\n      } else {\n        let cached = precomputes[offset + Math.abs(wbits) - 1];\n        if (wbits < 0) cached = cached.negate();\n        p = p.add(cached);\n      }\n    }\n\n    return ExtendedPoint.normalizeZ([p, f])[0];\n  }\n\n  multiply(scalar, affinePoint) {\n    return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n  }\n\n  multiplyUnsafe(scalar) {\n    let n = normalizeScalar(scalar, CURVE.l, false);\n    const G = ExtendedPoint.BASE;\n    const P0 = ExtendedPoint.ZERO;\n    if (n === _0n) return P0;\n    if (this.equals(P0) || n === _1n) return this;\n    if (this.equals(G)) return this.wNAF(n);\n    let p = P0;\n    let d = this;\n\n    while (n > _0n) {\n      if (n & _1n) p = p.add(d);\n      d = d.double();\n      n >>= _1n;\n    }\n\n    return p;\n  }\n\n  isSmallOrder() {\n    return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n  }\n\n  isTorsionFree() {\n    return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n  }\n\n  toAffine() {\n    let invZ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : invert(this.z);\n    const {\n      x,\n      y,\n      z\n    } = this;\n    const ax = mod(x * invZ);\n    const ay = mod(y * invZ);\n    const zz = mod(z * invZ);\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return new Point(ax, ay);\n  }\n\n  fromRistrettoBytes() {\n    legacyRist();\n  }\n\n  toRistrettoBytes() {\n    legacyRist();\n  }\n\n  fromRistrettoHash() {\n    legacyRist();\n  }\n\n}\n\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\n\nfunction assertExtPoint(other) {\n  if (!(other instanceof ExtendedPoint)) throw new TypeError('ExtendedPoint expected');\n}\n\nfunction assertRstPoint(other) {\n  if (!(other instanceof RistrettoPoint)) throw new TypeError('RistrettoPoint expected');\n}\n\nfunction legacyRist() {\n  throw new Error('Legacy method: switch to RistrettoPoint');\n}\n\nclass RistrettoPoint {\n  constructor(ep) {\n    this.ep = ep;\n  }\n\n  static calcElligatorRistrettoMap(r0) {\n    const {\n      d\n    } = CURVE;\n    const r = mod(SQRT_M1 * r0 * r0);\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n    let c = BigInt(-1);\n    const D = mod((c - d * r) * mod(r + d));\n    let {\n      isValid: Ns_D_is_sq,\n      value: s\n    } = uvRatio(Ns, D);\n    let s_ = mod(s * r0);\n    if (!edIsNegative(s_)) s_ = mod(-s_);\n    if (!Ns_D_is_sq) s = s_;\n    if (!Ns_D_is_sq) c = r;\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n    const s2 = s * s;\n    const W0 = mod((s + s) * D);\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n    const W2 = mod(_1n - s2);\n    const W3 = mod(_1n + s2);\n    return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n  }\n\n  static hashToCurve(hex) {\n    hex = ensureBytes(hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = this.calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = this.calcElligatorRistrettoMap(r2);\n    return new RistrettoPoint(R1.add(R2));\n  }\n\n  static fromHex(hex) {\n    hex = ensureBytes(hex, 32);\n    const {\n      a,\n      d\n    } = CURVE;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2);\n    const u2 = mod(_1n - a * s2);\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2);\n    const {\n      isValid,\n      value: I\n    } = invertSqrt(mod(v * u2_2));\n    const Dx = mod(I * u2);\n    const Dy = mod(I * Dx * v);\n    let x = mod((s + s) * Dx);\n    if (edIsNegative(x)) x = mod(-x);\n    const y = mod(u1 * Dy);\n    const t = mod(x * y);\n    if (!isValid || edIsNegative(t) || y === _0n) throw new Error(emsg);\n    return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n  }\n\n  toRawBytes() {\n    let {\n      x,\n      y,\n      z,\n      t\n    } = this.ep;\n    const u1 = mod(mod(z + y) * mod(z - y));\n    const u2 = mod(x * y);\n    const u2sq = mod(u2 * u2);\n    const {\n      value: invsqrt\n    } = invertSqrt(mod(u1 * u2sq));\n    const D1 = mod(invsqrt * u1);\n    const D2 = mod(invsqrt * u2);\n    const zInv = mod(D1 * D2 * t);\n    let D;\n\n    if (edIsNegative(t * zInv)) {\n      let _x = mod(y * SQRT_M1);\n\n      let _y = mod(x * SQRT_M1);\n\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2;\n    }\n\n    if (edIsNegative(x * zInv)) y = mod(-y);\n    let s = mod((z - y) * D);\n    if (edIsNegative(s)) s = mod(-s);\n    return numberTo32BytesLE(s);\n  }\n\n  toHex() {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString() {\n    return this.toHex();\n  }\n\n  equals(other) {\n    assertRstPoint(other);\n    const a = this.ep;\n    const b = other.ep;\n    const one = mod(a.x * b.y) === mod(a.y * b.x);\n    const two = mod(a.y * b.y) === mod(a.x * b.x);\n    return one || two;\n  }\n\n  add(other) {\n    assertRstPoint(other);\n    return new RistrettoPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other) {\n    assertRstPoint(other);\n    return new RistrettoPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar) {\n    return new RistrettoPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar) {\n    return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n  }\n\n}\n\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\n\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  _setWindowSize(windowSize) {\n    this._WINDOW_SIZE = windowSize;\n    pointPrecomputes.delete(this);\n  }\n\n  static fromHex(hex) {\n    let strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const {\n      d,\n      P\n    } = CURVE;\n    hex = ensureBytes(hex, 32);\n    const normed = hex.slice();\n    normed[31] = hex[31] & ~0x80;\n    const y = bytesToNumberLE(normed);\n    if (strict && y >= P) throw new Error('Expected 0 < hex < P');\n    if (!strict && y >= POW_2_256) throw new Error('Expected 0 < hex < 2**256');\n    const y2 = mod(y * y);\n    const u = mod(y2 - _1n);\n    const v = mod(d * y2 + _1n);\n    let {\n      isValid,\n      value: x\n    } = uvRatio(u, v);\n    if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n    const isXOdd = (x & _1n) === _1n;\n    const isLastByteOdd = (hex[31] & 0x80) !== 0;\n\n    if (isLastByteOdd !== isXOdd) {\n      x = mod(-x);\n    }\n\n    return new Point(x, y);\n  }\n\n  static async fromPrivateKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).point;\n  }\n\n  toRawBytes() {\n    const bytes = numberTo32BytesLE(this.y);\n    bytes[31] |= this.x & _1n ? 0x80 : 0;\n    return bytes;\n  }\n\n  toHex() {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toX25519() {\n    const {\n      y\n    } = this;\n    const u = mod((_1n + y) * invert(_1n - y));\n    return numberTo32BytesLE(u);\n  }\n\n  isTorsionFree() {\n    return ExtendedPoint.fromAffine(this).isTorsionFree();\n  }\n\n  equals(other) {\n    return this.x === other.x && this.y === other.y;\n  }\n\n  negate() {\n    return new Point(mod(-this.x), this.y);\n  }\n\n  add(other) {\n    return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n  }\n\n  subtract(other) {\n    return this.add(other.negate());\n  }\n\n  multiply(scalar) {\n    return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n  }\n\n}\n\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\n\nclass Signature {\n  constructor(r, s) {\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n\n  static fromHex(hex) {\n    const bytes = ensureBytes(hex, 64);\n    const r = Point.fromHex(bytes.slice(0, 32), false);\n    const s = bytesToNumberLE(bytes.slice(32, 64));\n    return new Signature(r, s);\n  }\n\n  assertValidity() {\n    const {\n      r,\n      s\n    } = this;\n    if (!(r instanceof Point)) throw new Error('Expected Point instance');\n    normalizeScalar(s, CURVE.l, false);\n    return this;\n  }\n\n  toRawBytes() {\n    const u8 = new Uint8Array(64);\n    u8.set(this.r.toRawBytes());\n    u8.set(numberTo32BytesLE(this.s), 32);\n    return u8;\n  }\n\n  toHex() {\n    return bytesToHex(this.toRawBytes());\n  }\n\n}\n\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\n\nfunction concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  if (!arrays.every(a => a instanceof Uint8Array)) throw new Error('Expected Uint8Array list');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n\n  return result;\n}\n\nconst hexes = Array.from({\n  length: 256\n}, (v, i) => i.toString(16).padStart(2, '0'));\n\nfunction bytesToHex(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n\n  return hex;\n}\n\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n\n  return array;\n}\n\nfunction numberTo32BytesBE(num) {\n  const length = 32;\n  const hex = num.toString(16).padStart(length * 2, '0');\n  return hexToBytes(hex);\n}\n\nfunction numberTo32BytesLE(num) {\n  return numberTo32BytesBE(num).reverse();\n}\n\nfunction edIsNegative(num) {\n  return (mod(num) & _1n) === _1n;\n}\n\nfunction bytesToNumberLE(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\n\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n\nfunction bytes255ToNumberLE(bytes) {\n  return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\n\nfunction mod(a) {\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  const res = a % b;\n  return res >= _0n ? res : b + res;\n}\n\nfunction invert(number) {\n  let modulo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n\n  let a = mod(number, modulo);\n  let b = modulo;\n  let x = _0n,\n      y = _1n,\n      u = _1n,\n      v = _0n;\n\n  while (a !== _0n) {\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\nfunction invertBatch(nums) {\n  let p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  const tmp = new Array(nums.length);\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (num === _0n) return acc;\n    tmp[i] = acc;\n    return mod(acc * num, p);\n  }, _1n);\n  const inverted = invert(lastMultiplied, p);\n  nums.reduceRight((acc, num, i) => {\n    if (num === _0n) return acc;\n    tmp[i] = mod(acc * tmp[i], p);\n    return mod(acc * num, p);\n  }, inverted);\n  return tmp;\n}\n\nfunction pow2(x, power) {\n  const {\n    P\n  } = CURVE;\n  let res = x;\n\n  while (power-- > _0n) {\n    res *= res;\n    res %= P;\n  }\n\n  return res;\n}\n\nfunction pow_2_252_3(x) {\n  const {\n    P\n  } = CURVE;\n\n  const _5n = BigInt(5);\n\n  const _10n = BigInt(10);\n\n  const _20n = BigInt(20);\n\n  const _40n = BigInt(40);\n\n  const _80n = BigInt(80);\n\n  const x2 = x * x % P;\n  const b2 = x2 * x % P;\n  const b4 = pow2(b2, _2n) * b2 % P;\n  const b5 = pow2(b4, _1n) * x % P;\n  const b10 = pow2(b5, _5n) * b5 % P;\n  const b20 = pow2(b10, _10n) * b10 % P;\n  const b40 = pow2(b20, _20n) * b20 % P;\n  const b80 = pow2(b40, _40n) * b40 % P;\n  const b160 = pow2(b80, _80n) * b80 % P;\n  const b240 = pow2(b160, _80n) * b80 % P;\n  const b250 = pow2(b240, _10n) * b10 % P;\n  const pow_p_5_8 = pow2(b250, _2n) * x % P;\n  return {\n    pow_p_5_8,\n    b2\n  };\n}\n\nfunction uvRatio(u, v) {\n  const v3 = mod(v * v * v);\n  const v7 = mod(v3 * v3 * v);\n  const pow = pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow);\n  const vx2 = mod(v * x * x);\n  const root1 = x;\n  const root2 = mod(x * SQRT_M1);\n  const useRoot1 = vx2 === u;\n  const useRoot2 = vx2 === mod(-u);\n  const noRoot = vx2 === mod(-u * SQRT_M1);\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2;\n  if (edIsNegative(x)) x = mod(-x);\n  return {\n    isValid: useRoot1 || useRoot2,\n    value: x\n  };\n}\n\nfunction invertSqrt(number) {\n  return uvRatio(_1n, number);\n}\n\nfunction modlLE(hash) {\n  return mod(bytesToNumberLE(hash), CURVE.l);\n}\n\nfunction equalBytes(b1, b2) {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < b1.length; i++) {\n    if (b1[i] !== b2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction ensureBytes(hex, expectedLength) {\n  const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n  if (typeof expectedLength === 'number' && bytes.length !== expectedLength) throw new Error(`Expected ${expectedLength} bytes`);\n  return bytes;\n}\n\nfunction normalizeScalar(num, max) {\n  let strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!max) throw new TypeError('Specify max value');\n  if (typeof num === 'number' && Number.isSafeInteger(num)) num = BigInt(num);\n\n  if (typeof num === 'bigint' && num < max) {\n    if (strict) {\n      if (_0n < num) return num;\n    } else {\n      if (_0n <= num) return num;\n    }\n  }\n\n  throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\n\nfunction adjustBytes25519(bytes) {\n  bytes[0] &= 248;\n  bytes[31] &= 127;\n  bytes[31] |= 64;\n  return bytes;\n}\n\nfunction decodeScalar25519(n) {\n  return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\n\nfunction checkPrivateKey(key) {\n  key = typeof key === 'bigint' || typeof key === 'number' ? numberTo32BytesBE(normalizeScalar(key, POW_2_256)) : ensureBytes(key);\n  if (key.length !== 32) throw new Error(`Expected 32 bytes`);\n  return key;\n}\n\nfunction getKeyFromHash(hashed) {\n  const head = adjustBytes25519(hashed.slice(0, 32));\n  const prefix = hashed.slice(32, 64);\n  const scalar = modlLE(head);\n  const point = Point.BASE.multiply(scalar);\n  const pointBytes = point.toRawBytes();\n  return {\n    head,\n    prefix,\n    scalar,\n    point,\n    pointBytes\n  };\n}\n\nlet _sha512Sync;\n\nfunction sha512s() {\n  if (typeof _sha512Sync !== 'function') throw new Error('utils.sha512Sync must be set to use sync methods');\n  return _sha512Sync(...arguments);\n}\n\nasync function getExtendedPublicKey(key) {\n  return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\n\nfunction getExtendedPublicKeySync(key) {\n  return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\n\nexport async function getPublicKey(privateKey) {\n  return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\n\nfunction getPublicKeySync(privateKey) {\n  return getExtendedPublicKeySync(privateKey).pointBytes;\n}\n\nexport async function sign(message, privateKey) {\n  message = ensureBytes(message);\n  const {\n    prefix,\n    scalar,\n    pointBytes\n  } = await getExtendedPublicKey(privateKey);\n  const r = modlLE(await utils.sha512(prefix, message));\n  const R = Point.BASE.multiply(r);\n  const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n  const s = mod(r + k * scalar, CURVE.l);\n  return new Signature(R, s).toRawBytes();\n}\n\nfunction signSync(message, privateKey) {\n  message = ensureBytes(message);\n  const {\n    prefix,\n    scalar,\n    pointBytes\n  } = getExtendedPublicKeySync(privateKey);\n  const r = modlLE(sha512s(prefix, message));\n  const R = Point.BASE.multiply(r);\n  const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n  const s = mod(r + k * scalar, CURVE.l);\n  return new Signature(R, s).toRawBytes();\n}\n\nfunction prepareVerification(sig, message, publicKey) {\n  message = ensureBytes(message);\n  if (!(publicKey instanceof Point)) publicKey = Point.fromHex(publicKey, false);\n  const {\n    r,\n    s\n  } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n  const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n  return {\n    r,\n    s,\n    SB,\n    pub: publicKey,\n    msg: message\n  };\n}\n\nfunction finishVerification(publicKey, r, SB, hashed) {\n  const k = modlLE(hashed);\n  const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n  const RkA = ExtendedPoint.fromAffine(r).add(kA);\n  return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\n\nexport async function verify(sig, message, publicKey) {\n  const {\n    r,\n    SB,\n    msg,\n    pub\n  } = prepareVerification(sig, message, publicKey);\n  const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n  return finishVerification(pub, r, SB, hashed);\n}\n\nfunction verifySync(sig, message, publicKey) {\n  const {\n    r,\n    SB,\n    msg,\n    pub\n  } = prepareVerification(sig, message, publicKey);\n  const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n  return finishVerification(pub, r, SB, hashed);\n}\n\nexport const sync = {\n  getExtendedPublicKey: getExtendedPublicKeySync,\n  getPublicKey: getPublicKeySync,\n  sign: signSync,\n  verify: verifySync\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n  const {\n    head\n  } = await getExtendedPublicKey(privateKey);\n  const u = Point.fromHex(publicKey).toX25519();\n  return curve25519.scalarMult(head, u);\n}\n\nPoint.BASE._setWindowSize(8);\n\nfunction cswap(swap, x_2, x_3) {\n  const dummy = mod(swap * (x_2 - x_3));\n  x_2 = mod(x_2 - dummy);\n  x_3 = mod(x_3 + dummy);\n  return [x_2, x_3];\n}\n\nfunction montgomeryLadder(pointU, scalar) {\n  const {\n    P\n  } = CURVE;\n  const u = normalizeScalar(pointU, P);\n  const k = normalizeScalar(scalar, P);\n  const a24 = BigInt(121665);\n  const x_1 = u;\n  let x_2 = _1n;\n  let z_2 = _0n;\n  let x_3 = u;\n  let z_3 = _1n;\n  let swap = _0n;\n  let sw;\n\n  for (let t = BigInt(255 - 1); t >= _0n; t--) {\n    const k_t = k >> t & _1n;\n    swap ^= k_t;\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    swap = k_t;\n    const A = x_2 + z_2;\n    const AA = mod(A * A);\n    const B = x_2 - z_2;\n    const BB = mod(B * B);\n    const E = AA - BB;\n    const C = x_3 + z_3;\n    const D = x_3 - z_3;\n    const DA = mod(D * A);\n    const CB = mod(C * B);\n    const dacb = DA + CB;\n    const da_cb = DA - CB;\n    x_3 = mod(dacb * dacb);\n    z_3 = mod(x_1 * mod(da_cb * da_cb));\n    x_2 = mod(AA * BB);\n    z_2 = mod(E * (AA + mod(a24 * E)));\n  }\n\n  sw = cswap(swap, x_2, x_3);\n  x_2 = sw[0];\n  x_3 = sw[1];\n  sw = cswap(swap, z_2, z_3);\n  z_2 = sw[0];\n  z_3 = sw[1];\n  const {\n    pow_p_5_8,\n    b2\n  } = pow_2_252_3(z_2);\n  const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n  return mod(x_2 * xp2);\n}\n\nfunction encodeUCoordinate(u) {\n  return numberTo32BytesLE(mod(u, CURVE.P));\n}\n\nfunction decodeUCoordinate(uEnc) {\n  const u = ensureBytes(uEnc, 32);\n  u[31] &= 127;\n  return bytesToNumberLE(u);\n}\n\nexport const curve25519 = {\n  BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n\n  scalarMult(privateKey, publicKey) {\n    const u = decodeUCoordinate(publicKey);\n    const p = decodeScalar25519(privateKey);\n    const pu = montgomeryLadder(u, p);\n    if (pu === _0n) throw new Error('Invalid private or public key received');\n    return encodeUCoordinate(pu);\n  },\n\n  scalarMultBase(privateKey) {\n    return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n  }\n\n};\nconst crypto = {\n  node: nodeCrypto,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined\n};\nexport const utils = {\n  bytesToHex,\n  hexToBytes,\n  concatBytes,\n  getExtendedPublicKey,\n  mod,\n  invert,\n  TORSION_SUBGROUP: ['0100000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a', '0000000000000000000000000000000000000000000000000000000000000080', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05', 'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85', '0000000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa'],\n  hashToPrivateScalar: hash => {\n    hash = ensureBytes(hash);\n    if (hash.length < 40 || hash.length > 1024) throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n    return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n  },\n  randomBytes: function () {\n    let bytesLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n\n    if (crypto.web) {\n      return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    } else if (crypto.node) {\n      const {\n        randomBytes\n      } = crypto.node;\n      return new Uint8Array(randomBytes(bytesLength).buffer);\n    } else {\n      throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n  },\n  randomPrivateKey: () => {\n    return utils.randomBytes(32);\n  },\n  sha512: async function () {\n    const message = concatBytes(...arguments);\n\n    if (crypto.web) {\n      const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n      return new Uint8Array(buffer);\n    } else if (crypto.node) {\n      return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n    } else {\n      throw new Error(\"The environment doesn't have sha512 function\");\n    }\n  },\n\n  precompute() {\n    let windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n    let point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n    const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n\n    cached._setWindowSize(windowSize);\n\n    cached.multiply(_2n);\n    return cached;\n  },\n\n  sha512Sync: undefined\n};\nObject.defineProperties(utils, {\n  sha512Sync: {\n    configurable: false,\n\n    get() {\n      return _sha512Sync;\n    },\n\n    set(val) {\n      if (!_sha512Sync) _sha512Sync = val;\n    }\n\n  }\n});","map":null,"metadata":{},"sourceType":"module"}