{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Auth = void 0;\n\nconst uuid_1 = require(\"uuid\");\n\nconst crypto_js_1 = __importDefault(require(\"crypto-js\"));\n\nconst events_1 = require(\"events\");\n\nconst types_1 = require(\"./types\");\n\nconst utils_1 = require(\"./utils\");\n\nclass Auth {\n  constructor(config) {\n    this.config = config;\n    this.userStore = \"particle_user_info\";\n    this.events = new events_1.EventEmitter();\n    this.secretKey = \"\";\n    this._authResult = null;\n    this.uiMode = \"auto\";\n    this.displayCloseButton = true;\n    this.config = config;\n    window.addEventListener(\"message\", event => {\n      if (event.data.name && event.data.name === \"particle-network-provider\" && this._authResult) {\n        const data = this.decrypt(event.data.data);\n\n        if (data.token && data.uuid) {\n          this.setUserInfo(data);\n        }\n\n        if (data.wallets) {\n          const userInfo = this.userInfo();\n\n          if (userInfo) {\n            userInfo.wallets = data.wallets;\n            this.setUserInfo(userInfo);\n          }\n        }\n\n        if (data.error) {\n          if (data.error.code === 8005 || data.error.code === 10005) {\n            this.setUserInfo(null);\n            this.events.emit(\"disconnect\");\n          }\n\n          this._authResult.reject(data.error);\n        } else {\n          this._authResult.resolve(data);\n        }\n\n        this._authResult.iframe.remove();\n\n        this._authResult = null;\n        const container = document.getElementById(\"particle-network-container\");\n\n        if (container) {\n          container.style.display = \"none\";\n        }\n      }\n    });\n  }\n\n  login(config) {\n    var _a;\n\n    const iframe = this.getIframe();\n    iframe.src = this.buildUrl(\"/login\", {\n      login_type: config === null || config === void 0 ? void 0 : config.preferredAuthType,\n      support_auth_types: (_a = config === null || config === void 0 ? void 0 : config.supportAuthTypes) !== null && _a !== void 0 ? _a : \"all\",\n      account: config === null || config === void 0 ? void 0 : config.emailOrPhoneAccount,\n      login_form_mode: config === null || config === void 0 ? void 0 : config.loginFormMode\n    });\n    return new Promise((resolve, reject) => {\n      this.setAuthResult({\n        resolve: value => {\n          this.events.emit(\"connect\", value);\n          resolve(value);\n        },\n        reject,\n        iframe\n      });\n    });\n  }\n\n  logout() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const iframe = this.getIframe();\n      iframe.src = this.buildUrl(\"/logout\");\n      return new Promise((resolve, reject) => {\n        this.setAuthResult({\n          resolve: () => {\n            this.setUserInfo(null);\n            this.events.emit(\"disconnect\");\n            resolve();\n          },\n          reject,\n          iframe\n        });\n      });\n    });\n  }\n\n  sign(method, message) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletExist()) {\n        return Promise.reject(types_1.AuthError.walletNotCreated());\n      }\n\n      const iframe = this.getIframe();\n\n      if (this.config.chainName === \"solana\") {\n        iframe.src = this.buildUrl(\"/solana/sign\", {\n          token: (_a = this.userInfo()) === null || _a === void 0 ? void 0 : _a.token,\n          method: method,\n          chain_id: Number(this.config.chainId),\n          message: message\n        });\n      } else {\n        iframe.src = this.buildUrl(\"/evm-chain/sign\", {\n          token: (_b = this.userInfo()) === null || _b === void 0 ? void 0 : _b.token,\n          method: method,\n          chain_id: Number(this.config.chainId),\n          message: message\n        });\n      }\n\n      return new Promise((resolve, reject) => {\n        this.setAuthResult({\n          resolve: value => {\n            var _a;\n\n            resolve((_a = value.signature) !== null && _a !== void 0 ? _a : \"\");\n          },\n          reject,\n          iframe\n        });\n      });\n    });\n  }\n\n  signAllTransactions(messages) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletExist()) {\n        return Promise.reject(types_1.AuthError.walletNotCreated());\n      }\n\n      if (this.config.chainName !== \"solana\") {\n        return Promise.reject(types_1.AuthError.unsupportedMethod());\n      }\n\n      const result = yield this.sign(\"signAllTransactions\", JSON.stringify(messages));\n      const signatures = JSON.parse(result);\n      return signatures;\n    });\n  }\n\n  sendTransaction(message) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletExist()) {\n        return Promise.reject(types_1.AuthError.walletNotCreated());\n      }\n\n      if (this.config.chainName === \"solana\") {\n        return this.sign(\"signAndSendTransaction\", message);\n      } else {\n        const iframe = this.getIframe();\n        iframe.src = this.buildUrl(\"/evm-chain/sign\", {\n          token: (_a = this.userInfo()) === null || _a === void 0 ? void 0 : _a.token,\n          method: \"eth_sendTransaction\",\n          chain_id: Number(this.config.chainId),\n          message: message\n        });\n        return new Promise((resolve, reject) => {\n          this.setAuthResult({\n            resolve: value => {\n              var _a;\n\n              resolve((_a = value.signature) !== null && _a !== void 0 ? _a : \"\");\n            },\n            reject,\n            iframe\n          });\n        });\n      }\n    });\n  }\n\n  setChainInfo(chain) {\n    const userInfo = this.userInfo();\n\n    if (!userInfo) {\n      return Promise.reject(types_1.AuthError.notLogin());\n    }\n\n    if (typeof chain.name !== \"string\" || typeof chain.id !== \"number\") {\n      throw types_1.AuthError.paramsError();\n    }\n\n    if (!Object.keys(types_1.supportChains).includes(chain.name)) {\n      throw types_1.AuthError.unsupportedChain();\n    }\n\n    const chainName = chain.name;\n\n    if (!types_1.supportChains[chainName].includes(chain.id)) {\n      throw types_1.AuthError.unsupportedChain();\n    }\n\n    const wallets = userInfo.wallets;\n\n    if (this.config.chainName === chain.name && this.config.chainId === chain.id) {\n      return Promise.resolve(wallets);\n    }\n\n    const wallet = this.wallet(chainName === \"solana\" ? \"solana\" : \"evm_chain\");\n\n    if (wallet) {\n      this.config.chainName = chain.name;\n      this.config.chainId = chain.id;\n      this.events.emit(\"chainChanged\", chain);\n      return Promise.resolve(wallets);\n    } //create wallet\n\n\n    const iframe = this.getIframe();\n    iframe.src = this.buildUrl(\"/wallet\", {\n      token: userInfo.token,\n      chain_name: chain.name\n    });\n    return new Promise((resolve, reject) => {\n      this.setAuthResult({\n        resolve: value => {\n          this.config.chainName = chain.name;\n          this.config.chainId = chain.id;\n          this.events.emit(\"connect\", this.userInfo());\n          this.events.emit(\"chainChanged\", chain);\n          resolve(value);\n        },\n        reject,\n        iframe\n      });\n    });\n  }\n\n  chainId() {\n    return this.config.chainId;\n  }\n\n  basicCredentials() {\n    return `Basic ${Buffer.from(`${this.config.projectId}:${this.config.clientKey}`, \"utf8\").toString(\"base64\")}`;\n  }\n\n  isLogin() {\n    return this.userInfo() !== null;\n  }\n\n  userInfo() {\n    const info = window.localStorage.getItem(this.userStore);\n    return info ? JSON.parse(info) : null;\n  }\n\n  walletExist() {\n    return this.wallet() != null;\n  }\n\n  wallet(chainType) {\n    const userInfo = this.userInfo();\n\n    if (!userInfo) {\n      return null;\n    }\n\n    const wallet = userInfo.wallets.find(wallet => wallet.chain_name === (chainType || this.walletChainName()));\n\n    if (wallet !== undefined && wallet.public_address.length > 0) {\n      return wallet;\n    }\n\n    return null;\n  }\n\n  setAuthTheme(config) {\n    if (config.uiMode) {\n      this.uiMode = config.uiMode;\n    }\n\n    if (config.displayCloseButton !== null && config.displayCloseButton !== undefined) {\n      this.displayCloseButton = config.displayCloseButton;\n    }\n  }\n\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n\n  walletChainName() {\n    return this.config.chainName === \"solana\" ? \"solana\" : \"evm_chain\";\n  }\n\n  setAuthResult(authResult) {\n    if (this._authResult) {\n      this._authResult.reject(types_1.AuthError.userCancelOperation());\n    }\n\n    this._authResult = authResult;\n  }\n\n  setUserInfo(info) {\n    if (info) {\n      window.localStorage.setItem(this.userStore, JSON.stringify(info));\n    } else {\n      window.localStorage.removeItem(this.userStore);\n    }\n  }\n\n  getIframe() {\n    let containerDiv = document.getElementById(\"particle-network-container\");\n\n    if (!containerDiv) {\n      containerDiv = document.createElement(\"div\");\n      containerDiv.setAttribute(\"style\", \"display: block;position: fixed;top: 0px;right: 0px;width: 100%;height: 100%;border-radius: 0px;border: none;z-index: 2147483647;background-color: rgba(0, 0, 0, 0.5);align-items: center;\");\n      containerDiv.id = \"particle-network-container\";\n      document.body.appendChild(containerDiv);\n    } else {\n      containerDiv.style.display = \"block\";\n    }\n\n    let iframe;\n    const elements = document.getElementsByName(\"particle-network-iframe\");\n\n    if (elements.length > 0) {\n      iframe = elements[0];\n      iframe.style.display = \"\";\n    } else {\n      iframe = document.createElement(\"iframe\");\n      iframe.name = \"particle-network-iframe\";\n      let bgColor = \"background-color: #FFFFFF\";\n      const themeType = this.getThemeType();\n\n      if (themeType === \"dark\") {\n        bgColor = \"background-color: #000000\";\n      }\n\n      iframe.setAttribute(\"style\", \"position: absolute;left: 50%;top: 50%;transform: translate(-50%, -50%);width: 400px;height: 650px;border-radius: 0px;border: none;z-index: 2147483647;box-shadow: -1px 3px 11px 2px #00000073;border-radius: 10px;\" + bgColor);\n      containerDiv.appendChild(iframe);\n    }\n\n    return iframe;\n  }\n\n  buildUrl(path) {\n    let extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a;\n\n    const schema = (_a = this.config.authUrl) !== null && _a !== void 0 ? _a : \"https://auth.particle.network\";\n    const params = {\n      project_uuid: this.config.projectId,\n      project_client_key: this.config.clientKey,\n      project_app_uuid: this.config.appId,\n      chain_name: this.config.chainName,\n      sdk_version: (0, utils_1.getVersion)(),\n      device_id: (0, utils_1.getDeviceId)(),\n      display_close_button: this.displayCloseButton\n    };\n    Object.assign(params, Object.assign({}, extraParams));\n    this.secretKey = (0, uuid_1.v4)().replace(/-/g, \"\").toUpperCase();\n    const keyWA = crypto_js_1.default.enc.Utf8.parse(this.secretKey);\n    const cipherText = crypto_js_1.default.AES.encrypt(JSON.stringify(params), keyWA, {\n      mode: crypto_js_1.default.mode.ECB,\n      algorithm: crypto_js_1.default.algo.AES,\n      padding: crypto_js_1.default.pad.Pkcs7,\n      formatter: crypto_js_1.default.format.Hex\n    }).ciphertext;\n    const value = encodeURIComponent(crypto_js_1.default.enc.Base64.stringify(cipherText)) + this.secretKey;\n    const url = `${schema}?params=${value}&encoding=base64&theme_type=${this.getThemeType()}#${path}`;\n    return url;\n  }\n\n  getThemeType() {\n    return this.uiMode === \"auto\" ? window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\" : this.uiMode;\n  }\n\n  decrypt(data) {\n    const dec = crypto_js_1.default.enc.Hex.parse(data);\n    const keyWA = crypto_js_1.default.enc.Utf8.parse(this.secretKey);\n    const bytes = crypto_js_1.default.AES.decrypt(crypto_js_1.default.lib.CipherParams.create({\n      ciphertext: dec,\n      key: keyWA,\n      algorithm: crypto_js_1.default.algo.AES,\n      padding: crypto_js_1.default.pad.Pkcs7,\n      formatter: crypto_js_1.default.format.Hex\n    }), keyWA, {\n      mode: crypto_js_1.default.mode.ECB\n    });\n    return JSON.parse(bytes.toString(crypto_js_1.default.enc.Utf8));\n  }\n\n}\n\nexports.Auth = Auth; //# sourceMappingURL=auth.js.map","map":null,"metadata":{},"sourceType":"script"}