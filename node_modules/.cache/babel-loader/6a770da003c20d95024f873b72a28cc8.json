{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomStringForEntropy = exports.randomString = exports.randomUint32 = exports.randomBytes = exports.defaultRandomSource = void 0;\n\nconst system_1 = require(\"./source/system\");\n\nconst binary_1 = require(\"@stablelib/binary\");\n\nconst wipe_1 = require(\"@stablelib/wipe\");\n\nexports.defaultRandomSource = new system_1.SystemRandomSource();\n\nfunction randomBytes(length) {\n  let prng = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.defaultRandomSource;\n  return prng.randomBytes(length);\n}\n\nexports.randomBytes = randomBytes;\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\n\nfunction randomUint32() {\n  let prng = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exports.defaultRandomSource;\n  // Generate 4-byte random buffer.\n  const buf = randomBytes(4, prng); // Convert bytes from buffer into a 32-bit integer.\n  // It's not important which byte order to use, since\n  // the result is random.\n\n  const result = (0, binary_1.readUint32LE)(buf); // Clean the buffer.\n\n  (0, wipe_1.wipe)(buf);\n  return result;\n}\n\nexports.randomUint32 = randomUint32;\n/** 62 alphanumeric characters for default charset of randomString() */\n\nconst ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\n\nfunction randomString(length) {\n  let charset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALPHANUMERIC;\n  let prng = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : exports.defaultRandomSource;\n\n  if (charset.length < 2) {\n    throw new Error(\"randomString charset is too short\");\n  }\n\n  if (charset.length > 256) {\n    throw new Error(\"randomString charset is too long\");\n  }\n\n  let out = '';\n  const charsLen = charset.length;\n  const maxByte = 256 - 256 % charsLen;\n\n  while (length > 0) {\n    const buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n\n    for (let i = 0; i < buf.length && length > 0; i++) {\n      const randomByte = buf[i];\n\n      if (randomByte < maxByte) {\n        out += charset.charAt(randomByte % charsLen);\n        length--;\n      }\n    }\n\n    (0, wipe_1.wipe)(buf);\n  }\n\n  return out;\n}\n\nexports.randomString = randomString;\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\n\nfunction randomStringForEntropy(bits) {\n  let charset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALPHANUMERIC;\n  let prng = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : exports.defaultRandomSource;\n  const length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n  return randomString(length, charset, prng);\n}\n\nexports.randomStringForEntropy = randomStringForEntropy; //# sourceMappingURL=random.js.map","map":null,"metadata":{},"sourceType":"script"}