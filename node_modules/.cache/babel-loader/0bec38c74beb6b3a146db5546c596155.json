{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeRandomSource = void 0;\n\nconst wipe_1 = require(\"@stablelib/wipe\");\n\nclass NodeRandomSource {\n  constructor() {\n    this.isAvailable = false;\n    this.isInstantiated = false;\n\n    if (typeof require !== \"undefined\") {\n      const nodeCrypto = require(\"crypto\");\n\n      if (nodeCrypto && nodeCrypto.randomBytes) {\n        this._crypto = nodeCrypto;\n        this.isAvailable = true;\n        this.isInstantiated = true;\n      }\n    }\n  }\n\n  randomBytes(length) {\n    if (!this.isAvailable || !this._crypto) {\n      throw new Error(\"Node.js random byte generator is not available.\");\n    } // Get random bytes (result is Buffer).\n\n\n    let buffer = this._crypto.randomBytes(length); // Make sure we got the length that we requested.\n\n\n    if (buffer.length !== length) {\n      throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n    } // Allocate output array.\n\n\n    const out = new Uint8Array(length); // Copy bytes from buffer to output.\n\n    for (let i = 0; i < out.length; i++) {\n      out[i] = buffer[i];\n    } // Cleanup.\n\n\n    (0, wipe_1.wipe)(buffer);\n    return out;\n  }\n\n}\n\nexports.NodeRandomSource = NodeRandomSource; //# sourceMappingURL=node.js.map","map":null,"metadata":{},"sourceType":"script"}